#![cfg(not(feature = "no_function"))]
use rhai::{Engine, EvalAltResult, ParseErrorType};

#[test]
fn test_stack_overflow_fn_calls() -> Result<(), Box<EvalAltResult>> {
    let engine = Engine::new();

    assert_eq!(
        engine.eval::<i64>(
            r"
                fn foo(n) { if n <= 1 { 0 } else { n + foo(n-1) } }
                foo(8)
    ",
        )?,
        35
    );

    #[cfg(not(feature = "unchecked"))]
    assert!(matches!(
        *engine.eval::<()>(
        r"
            fn foo(n) { if n == 0 { 0 } else { n + foo(n-1) } }
            foo(1000)
    ").expect_err("should error"),
        EvalAltResult::ErrorInFunctionCall(name, _, _) if name.starts_with("foo > foo > foo")
    ));

    Ok(())
}

#[test]
fn test_stack_overflow_parsing() -> Result<(), Box<EvalAltResult>> {
    let mut engine = Engine::new();

    assert!(matches!(
        *engine.compile(r"
            let a
        ").expect_err("should error"),
        err if err.error_type() == &ParseErrorType::ExprTooDeep
    ));

    engine.set_max_expr_depths(100, 6);

    engine.compile("1 + 2")?;
    engine.compile(
        r"
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 0 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8
    ",
    )?;

    assert!(matches!(
        *engine.compile(r"
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
            1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9
    ").expect_err("should error"),
        err if err.error_type() == &ParseErrorType::ExprTooDeep
    ));

    engine.compile("fn abc(x) { x + 1 }")?;

    Ok(())
}
